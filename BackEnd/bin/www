const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const mongoose = require('mongoose')

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

const server = http.createServer(app);

/* Database Connection */

/* -- Local Database -- */
// mongoose.connect('mongodb://localhost:27017/AttendanceSystem').then(console.log('Local DataBase Conncted')).catch(e => { console.log(e) });

/* -- Online Database -- */
mongoose.connect('mongodb+srv://user:user@attendancesystem.bn7sjdp.mongodb.net/?retryWrites=true&w=majority&appName=AttendanceSystem').then(console.log('Online DataBase Conncted')).catch(e => { console.log(e) });

server.listen(port, function () {
  console.log(`Server is running on ${port}`)
});


server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
